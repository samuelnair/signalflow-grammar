/**
 * Copyright (C) 2016 SignalFx, Inc.
 */
lexer grammar SignalFlowV2Lexer;

###LEXER_MEMBERS###
DEF
  : 'def'
  ;

RETURN
  : 'return'
  ;

FROM
  : 'from'
  ;

IMPORT
  : 'import'
  ;

AS
 : 'as'
 ;

LAMBDA
  : 'lambda'
  ;

NONE
  : 'None'
  ;

TRUE
  : 'True'
  ;

FALSE
  : 'False'
  ;

IF
  : 'if'
  ;

ELSE
  : 'else'
  ;

INT
  : [0-9]+
  ;

FLOAT
  : [0-9]* '.'? [0-9]+ ([eE][+-]?[0-9]+)?
  ;

STRING
  : '\'' (ESCAPE_SEQ | ~( '\'' | '\\' | '\r' | '\n'))* '\''
  | '"' (ESCAPE_SEQ | ~( '"' | '\\' | '\r' | '\n'))* '"'
  ;

fragment
ESCAPE_SEQ
  : '\\' ([btnfr] | '\"' | '\'' | '\\' | [0-3][0-7][0-7] | [0-7][0-7] | [0-7])
  ;

LE
  : '<='
  ;

GE
  : '>='
  ;

EQ
  : '=='
  ;

NE
  : '!='
  ;

LT
  : '<'
  ;

GT
  : '>'
  ;

OR
  : 'or'
  ;

AND
  : 'and'
  ;

NOT
  : 'not'
  ;

ID
  : [a-zA-Z_][a-zA-Z0-9_]*
  ;

###PARENS###

LSQUARE
  : '['
  ;

RSQUARE
  : ']'
  ;

LBRACE
  : '{'
  ;

RBRACE
  : '}'
  ;

COMMA
  : ','
  ;

SEMICOLON
  : ';'
  ;

COLON
  : ':'
  ;

PLUS
  : '+'
  ;

MINUS
  : '-'
  ;

MUL
  : '*'
  ;

DIV
  : '/'
  ;

POW
  : '**'
  ;

BINDING
  : '='
  ;

DOT
  : '.'
  ;

###NEWLINE###

fragment SPACES
 : [ \t]+
 ;

SKIP_
 : ( SPACES | COMMENT | LINE_JOINING ) -> skip
 ;

COMMENT
  : '#' ~[\r\n]*
  ;

fragment LINE_JOINING
 : '\\' SPACES? ( '\r'? '\n' | '\r' )
 ;

